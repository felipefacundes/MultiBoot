#!/bin/sh
exec tail -n +3 $0
# This file provides an easy way to add custom menu entries.  Simply type the
# menu entries you want to add after this comment.  Be careful not to change
# the 'exec tail' line above.
#insmod part_msdos
#insmod f2fs
#insmod search_fs_uuid
set root=UUID=e1922b06-a76e-4950-9b4a-105aa5f3de90
search --no-floppy --fs-uuid --set=root e1922b06-a76e-4950-9b4a-105aa5f3de90
set live=Live
set debug_mode="Live DEBUG mode"
source /efi/boot/android.cfg root=UUID=e1922b06-a76e-4950-9b4a-105aa5f3de90

menuentry "Memtest 86+" {
insmod part_msdos
insmod f2fs
insmod search_fs_uuid
set root=UUID=e1922b06-a76e-4950-9b4a-105aa5f3de90
search --no-floppy --fs-uuid --set=root e1922b06-a76e-4950-9b4a-105aa5f3de90
linux16 /boot/memtest86+/memtest.bin root=UUID=e1922b06-a76e-4950-9b4a-105aa5f3de90
}

menuentry "archlabs-2020.05.04.iso" --class dvd {
set isofile="/ISOs/archlabs-2020.05.04.iso"
set dri="free"
search --no-floppy -f --set=root $isofile
probe -u $root --set=abc
set pqr="/dev/disk/by-uuid/$abc"
loopback loop $isofile
linux (loop)/arch/boot/x86_64/vmlinuz img_dev=$pqr img_loop=$isofile driver=$dri
initrd (loop)/arch/boot/x86_64/archiso.img
}

menuentry "archlabs-2020.05.04.iso 2" --class dvd {
insmod part_msdos
insmod f2fs
insmod search_fs_uuid
set root=UUID=e1922b06-a76e-4950-9b4a-105aa5f3de90
set isofile="/ISOs/archlabs-2020.05.04.iso" root=UUID=e1922b06-a76e-4950-9b4a-105aa5f3de90
set dri="free"
search --no-floppy -f --set=root $isofile
probe -u $root --set=abc
set pqr="/dev/disk/by-uuid/$abc"
loopback loop $isofile
linux (loop)/arch/boot/x86_64/vmlinuz img_dev=$pqr img_loop=$isofile driver=$dri
initrd (loop)/arch/boot/x86_64/archiso.img
}

menuentry "Windows 8.1 Installer Partition" --class windows --class os {
#insmod part_gpt
insmod part_msdos
insmod chain
insmod exfat
insmod fat
insmod search_fs_uuid
set root=UUID=BC13-1422
search --no-floppy --fs-uuid --set=root BC13-1422
chainloader /efi/boot/bootx64.efi root=UUID=BC13-1422
}

menuentry "PrimeOS_mainline_0.4.5.iso" --class android-x86  {
insmod part_msdos
insmod f2fs
insmod search_fs_uuid
set root=UUID=e1922b06-a76e-4950-9b4a-105aa5f3de90
search --no-floppy --fs-uuid --set=root e1922b06-a76e-4950-9b4a-105aa5f3de90
set isofile="/ISOs/primeos_mainline_0.4.5.iso" root=UUID=e1922b06-a76e-4950-9b4a-105aa5f3de90
set src=iso-scan/filename=$isofile
loopback loop $isofile
set dri="free"
export android bootefi grub kdir live src
linux (loop)/kernel root=/dev/ram0 root=/dev/ram0 androidboot.selinux=permissive buildvariant=userdebug $src $@
initrd (loop)/initrd.img
}

menuentry "PrimeOS_mainline_0.4.5.iso 2" --class android-x86  {
insmod part_msdos
insmod f2fs
insmod search_fs_uuid
set root=UUID=e1922b06-a76e-4950-9b4a-105aa5f3de90
search --no-floppy --fs-uuid --set=root e1922b06-a76e-4950-9b4a-105aa5f3de90
set isofile="/ISOs/primeos_mainline_0.4.5.iso" root=UUID=e1922b06-a76e-4950-9b4a-105aa5f3de90
set src=iso-scan/filename=$isofile
loopback loop $isofile
set dri="free"
probe -u $root --set=abc
set pqr="/dev/disk/by-uuid/$abc"
linux (loop)/kernel img_dev=$pqr img_loop=$isofile root=/dev/ram0 androidboot.selinux=permissive quiet buildvariant=userdebug driver=$dri VGA=788 $src $@
initrd (loop)/initrd.img
}

#######################################################################
#############  Android Prime OS

# $1 Title
# $2... Kernel cmdline
function add_entry {
	menuentry "PrimeOS $1" "$@" --class android-x86 {
		shift 2
		set root=$android
		linux $kdir/kernel root=/dev/ram0 androidboot.selinux=permissive buildvariant=userdebug $src $@
		initrd $kdir/initrd.img
	}
}

# $1 EFI to chainload
# $2 OS name
# $3 Class
function add_os_if_exists {
	# Is there a better way to find ESP?
	for d in hd0,gpt1 hd0,gpt2 hd0,gpt3 hd1,gpt1 hd1,gpt2 hd1,gpt3 hd2,gpt1 hd2,gpt2 hd2,gpt3 hd0,msdos1 hd0,msdos2 hd0,msdos3 hd1,msdos1 hd1,msdos2 hd1,msdos3 hd2,msdos1 hd2,msdos2 hd2,msdos3; do
		if [ "($d)$1" != "$cmdpath/$bootefi" -a -e ($d)$1 ]; then
			menuentry "$2 at $d ->" "$d" "$1" --class "$3" {
				set root=$2
				chainloader ($root)$3
			}
			break
		fi
	done
}

if [ -s $prefix/grubenv ]; then
	load_env
fi

if [ "$grub_cpu" = "i386" ]; then
	set bootefi=bootia32.efi
	set grub=grubia32
else
	set bootefi=BOOTx64.EFI
	set grub=grubx64
fi

if [ -z "$src" -a -n "$isofile" ]; then
	set src=iso-scan/filename=$isofile
fi

search --no-floppy --set android -f $kdir/kernel
export android bootefi grub kdir live src

# Create main menu
add_entry "$live" quiet

# Add other OSes boot loaders if exist
add_os_if_exists /EFI/fedora/${grub}.efi Fedora fedora
add_os_if_exists /EFI/centos/${grub}.efi CentOS centos
add_os_if_exists /EFI/ubuntu/${grub}.efi Ubuntu ubuntu
add_os_if_exists /EFI/debian/${grub}.efi Debian debian
add_os_if_exists /EFI/linuxmint/${grub}.efi "Linux Mint" linuxmint
add_os_if_exists /EFI/Microsoft/Boot/bootmgfw.efi Windows windows

if [ -s ($android)$kdir/install.img ]; then
	add_entry "Installation" INSTALL=1
fi

submenu "Advanced options -> " {
	add_entry "$debug_mode - DEBUG Mode" DEBUG=2
	add_entry "$live - No Setup Wizard" quiet SETUPWIZARD=0
	add_entry "$live - No Hardware Acceleration" quiet nomodeset HWACCEL=0
	if [ -s ($android)$kdir/install.img ]; then
		add_entry "Auto Install to specified harddisk" AUTO_INSTALL=0
		add_entry "Auto Update" AUTO_INSTALL=update
	fi
	add_os_if_exists /EFI/BOOT/$bootefi "UEFI OS"
	add_os_if_exists /EFI/BOOT/fallback.efi "UEFI Fallback"
	if [ "$grub_cpu" != "i386" ]; then
		add_os_if_exists /EFI/BOOT/fallback_x64.efi "UEFI Fallback"
		menuentry "Reboot" { reboot }
		menuentry "Poweroff" { halt }
		menuentry "UEFI BIOS Setup" { fwsetup }
	fi
}

for d in $config_directory $cmdpath $prefix; do
	if [ -f $d/custom.cfg ]; then
		source $d/custom.cfg
	fi
done
