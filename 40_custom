#!/bin/sh
exec tail -n +3 $0
# This file provides an easy way to add custom menu entries.  Simply type the
# menu entries you want to add after this comment.  Be careful not to change
# the 'exec tail' line above.

submenu "Power Options" {
        menuentry "Desligar" {
            echo "Desligando o sistema..."
            halt
}
        menuentry "Reiniciar" {
            echo "Reiniciando o sistema..."
            reboot
        }
}

menuentry "Memtest 86+" --class=memtest --hotkey=m {
        insmod part_msdos
        #insmod f2fs
        insmod search_fs_uuid
        set root=UUID=874d4be9-50fa-4a25-bec9-e0c5b61126de
        search --no-floppy --fs-uuid --set=root 874d4be9-50fa-4a25-bec9-e0c5b61126de
        linux16 /boot/memtest86+/memtest.bin root=UUID=874d4be9-50fa-4a25-bec9-e0c5b61126de
}

submenu "MULTIBOOT ISO Images" {
        menuentry "archlabs-2020.05.04.iso" --hotkey=l --class dvd {
            insmod part_msdos
            #insmod f2fs
            insmod search_fs_uuid
            set root=UUID=874d4be9-50fa-4a25-bec9-e0c5b61126de
            set isofile="/ISOs/archlabs-2020.05.04.iso" root=UUID=874d4be9-50fa-4a25-bec9-e0c5b61126de
            set dri="free"
            search --no-floppy -f --set=root $isofile
            probe -u $root --set=abc
            set pqr="/dev/disk/by-uuid/$abc"
            loopback loop $isofile
            #efi_bootfile="(loop)/EFI/boot/bootx64.efi"
            linux (loop)/arch/boot/x86_64/vmlinuz img_dev=$pqr img_loop=$isofile driver=$dri
            initrd (loop)/arch/boot/x86_64/archiso.img
        }

submenu "endeavouros-2020.09.20-x86_64.iso" {
        menuentry "endeavouros-2020.09.20-x86_64.iso Free" --hotkey=e --class dvd {
            insmod part_msdos
            #insmod f2fs
            insmod search_fs_uuid
            set root=UUID=874d4be9-50fa-4a25-bec9-e0c5b61126de
            set isofile="/ISOs/endeavouros-2020.09.20-x86_64.iso" root=UUID=874d4be9-50fa-4a25-bec9-e0c5b61126de
            set dri="free"
            search --no-floppy -f --set=root $isofile
            probe -u $root --set=abc
            set pqr="/dev/disk/by-uuid/$abc"
            loopback loop $isofile
            #efi_bootfile="(loop)/EFI/boot/bootx64.efi"
            linux (loop)/arch/boot/x86_64/vmlinuz-linux img_dev=$pqr img_loop=$isofile archisobasedir=arch cow_spacesize=10G archisolabel=ENDEAVOUROS earlymodules=loop modules-load=loop rd.modules-load=loop i915.modeset=1 radeon.modeset=1 nvidia.blacklist=yes modprobe.blacklist=nvidia nouveau.modeset=1 nouveau
            initrd (loop)/arch/boot/intel-ucode.img (loop)/arch/boot/amd-ucode.img (loop)/arch/boot/x86_64/archiso.img
        }

        menuentry "endeavouros-2020.09.20-x86_64.iso NonFree (Proprietary driver)" --class dvd {
            insmod part_msdos
            #insmod f2fs
            insmod search_fs_uuid
            set root=UUID=874d4be9-50fa-4a25-bec9-e0c5b61126de
            set isofile="/ISOs/endeavouros-2020.09.20-x86_64.iso" root=UUID=874d4be9-50fa-4a25-bec9-e0c5b61126de
            set dri="free"
            search --no-floppy -f --set=root $isofile
            probe -u $root --set=abc
            set pqr="/dev/disk/by-uuid/$abc"
            loopback loop $isofile
            #efi_bootfile="(loop)/EFI/boot/bootx64.efi"
            linux (loop)/arch/boot/x86_64/vmlinuz-linux img_dev=$pqr img_loop=$isofile archisobasedir=arch cow_spacesize=10G archisolabel=ENDEAVOUROS earlymodules=loop modules-load=loop rd.modules-load=loop nvidia nouveau.modeset=0 nouveau.blacklist=yes modprobe.blacklist=nouveau i915.modeset=1 radeon.modeset=1
            initrd (loop)/arch/boot/intel-ucode.img (loop)/arch/boot/amd-ucode.img (loop)/arch/boot/x86_64/archiso.img
        }
}

        menuentry "artix-lxde-openrc-20200210-x86_64.iso" --hotkey=o --class=artix.x86_64 {
            insmod part_msdos
            #insmod f2fs
            insmod search_fs_uuid
            set root=UUID=874d4be9-50fa-4a25-bec9-e0c5b61126de
            set isofile="/ISOs/artix-lxde-openrc-20200210-x86_64.iso" root=UUID=874d4be9-50fa-4a25-bec9-e0c5b61126de
            search --no-floppy -f --set=root $isofile
            probe -u $root --set=abc
            set pqr="/dev/disk/by-uuid/$abc"
            loopback loop $isofile
            efi_bootfile="(loop)/efi/boot/bootx64.efi"
            linux (loop)/boot/vmlinuz-x86_64 img_dev=$pqr img_loop=$isofile
            initrd (loop)/boot/intel-ucode.img (loop)/boot/amd-ucode.img (loop)/boot/initramfs-x86_64.img (loop)/boot/efi.img
        }

        menuentry "AntivirusLiveCD-34.0-0.102.4.iso" --class dvd {
            #insmod part_gpt
            insmod part_msdos
            #insmod f2fs
            insmod search_fs_uuid
            set root=UUID=874d4be9-50fa-4a25-bec9-e0c5b61126de
            set isofile="/ISOs/AntivirusLiveCD-34.0-0.102.4.iso" root=UUID=874d4be9-50fa-4a25-bec9-e0c5b61126de
            set dri="free"
            search --no-floppy -f --set=root $isofile
            probe -u $root --set=abc
            set pqr="/dev/disk/by-uuid/$abc"
            loopback loop $isofile
            linux (loop)/boot/bzImage img_dev=$pqr img_loop=$isofile driver=$dri root=/dev/ram0 vga=normal
            initrd (loop)/boot/initrd.gz
            # vga=ask
        }

        menuentry "Clonezilla x86_64 (Default settings, VGA 1024x768)" --class dvd {
            insmod part_msdos
            #insmod f2fs
            insmod search_fs_uuid
            set root=UUID=874d4be9-50fa-4a25-bec9-e0c5b61126de
            set isofile="/ISOs/clonezilla-live-20200703-focal-amd64.iso" root=UUID=874d4be9-50fa-4a25-bec9-e0c5b61126de
            set dri="free"
            search --no-floppy -f --set=root $isofile
            probe -u $root --set=abc
            set pqr="/dev/disk/by-uuid/$abc"
            loopback loop $isofile
            linux (loop)/live/vmlinuz img_dev=$pqr img_loop=$isofile driver=$dri boot=live union=overlay username=user hostname=focal config quiet components noswap edd=on nomodeset enforcing=0 locales= keyboard-layouts= ocs_live_run="ocs-live-general" ocs_live_extra_param="" ocs_live_batch="no" vga=791 toram=filesystem.squashfs ip= net.ifnames=0 splash i915.blacklist=yes radeonhd.blacklist=yes nouveau.blacklist=yes vmwgfx.enable_fbdev=1
            initrd (loop)/live/initrd.img
        }

}

menuentry "Kaspersky Rescue Disk 18.0.11.0 Partition" --class dvd {
        #insmod part_gpt
        insmod part_msdos
        #insmod f2fs
        insmod search_fs_uuid
        set root=UUID=874d4be9-50fa-4a25-bec9-e0c5b61126de
        search --no-floppy --fs-uuid --set=root 874d4be9-50fa-4a25-bec9-e0c5b61126de
        set dri="free"
        efi_bootfile="/efi/boot/bootx64.efi"
        linux /boot/grub/k-x86_64 net.ifnames=0 lang=en dostartx driver=$dri
        initrd /boot/grub/initrd.xz
        #nomodeset xforcevesa
}

menuentry "Windows 8.1 Installer Partition" --hotkey=w --class windows --class os {
        #insmod part_gpt
        insmod part_msdos
        insmod chain
        insmod exfat
        insmod fat
        insmod search_fs_uuid
        set root=UUID=CAE4-CE67
        search --no-floppy --fs-uuid --set=root CAE4-CE67
        chainloader /efi/boot/bootx64.efi root=UUID=CAE4-CE67
}

submenu "PrimeOS_mainline_0.4.5 Partition" {
        menuentry "PrimeOS_mainline_0.4.5 Live Partition" --class android-x86 {
            insmod part_msdos
            #insmod f2fs
            insmod search_fs_uuid
            set root=UUID=874d4be9-50fa-4a25-bec9-e0c5b61126de
            search --no-floppy --fs-uuid --set=root 874d4be9-50fa-4a25-bec9-e0c5b61126de
            linux /kernel root=/dev/ram0 root=/dev/ram0 androidboot.selinux=permissive buildvariant=userdebug
            initrd /initrd.img
        }
        menuentry "PrimeOS_mainline_0.4.5 Installer Partition" --hotkey=a --class android-x86 {
            insmod part_msdos
            #insmod f2fs
            insmod search_fs_uuid
            set root=UUID=874d4be9-50fa-4a25-bec9-e0c5b61126de
            search --no-floppy --fs-uuid --set=root 874d4be9-50fa-4a25-bec9-e0c5b61126de
            linux /kernel root=/dev/ram0 root=/dev/ram0 androidboot.selinux=permissive buildvariant=userdebug INSTALL=1 DEBUG=
            initrd /initrd.img
        }
}

#######################################################################
#######################################################################
#######################################################################
########################  Android Prime OS ############################

# $1 Title
# $2... Kernel cmdline
function add_entry {
	menuentry "PrimeOS $1" "$@" --class android-x86 {
		shift 2
		set root=$android
		linux $kdir/kernel root=/dev/ram0 androidboot.selinux=permissive buildvariant=userdebug $src $@
		initrd $kdir/initrd.img
	}
}

# $1 EFI to chainload
# $2 OS name
# $3 Class
function add_os_if_exists {
	# Is there a better way to find ESP?
	for d in hd0,gpt1 hd0,gpt2 hd0,gpt3 hd0,gpt4 hd1,gpt1 hd1,gpt2 hd1,gpt3 hd1,gpt4 hd2,gpt1 hd2,gpt2 hd2,gpt3 hd2,gpt4 hd0,msdos1 hd0,msdos2 hd0,msdos3 hd0,msdos4 hd1,msdos1 hd1,msdos2 hd1,msdos3 hd1,msdos4 hd2,msdos1 hd2,msdos2 hd2,msdos3 hd2,msdos4; do
		if [ "($d)$1" != "$cmdpath/$bootefi" -a -e ($d)$1 ]; then
			menuentry "$2 at $d ->" "$d" "$1" --class "$3" {
				set root=$2
				chainloader ($root)$3
			}
			break
		fi
	done
}

if [ -s $prefix/grubenv ]; then
	load_env
fi

if [ "$grub_cpu" = "i386" ]; then
	set bootefi=bootia32.efi
	set grub=grubia32
else
	set bootefi=BOOTx64.EFI
	set grub=grubx64
fi

if [ -z "$src" -a -n "$isofile" ]; then
	set src=iso-scan/filename=$isofile
fi

search --no-floppy --set android -f $kdir/kernel
export android bootefi grub kdir live src

# Create main menu
add_entry "$live" quiet

# Add other OSes boot loaders if exist
add_os_if_exists /EFI/fedora/${grub}.efi Fedora fedora
add_os_if_exists /EFI/centos/${grub}.efi CentOS centos
add_os_if_exists /EFI/ubuntu/${grub}.efi Ubuntu ubuntu
add_os_if_exists /EFI/debian/${grub}.efi Debian debian
add_os_if_exists /EFI/linuxmint/${grub}.efi "Linux Mint" linuxmint
add_os_if_exists /EFI/Microsoft/Boot/bootmgfw.efi Windows windows

if [ -s ($android)$kdir/install.img ]; then
	add_entry "Installation" INSTALL=1
fi

submenu "Advanced options -> " {
	add_entry "$debug_mode - DEBUG Mode" DEBUG=2
	add_entry "$live - No Setup Wizard" quiet SETUPWIZARD=0
	add_entry "$live - No Hardware Acceleration" quiet nomodeset HWACCEL=0
	if [ -s ($android)$kdir/install.img ]; then
		add_entry "Auto Install to specified harddisk" AUTO_INSTALL=0
		add_entry "Auto Update" AUTO_INSTALL=update
	fi
	add_os_if_exists /EFI/BOOT/$bootefi "UEFI OS"
	add_os_if_exists /EFI/BOOT/fallback.efi "UEFI Fallback"
	if [ "$grub_cpu" != "i386" ]; then
		add_os_if_exists /EFI/BOOT/fallback_x64.efi "UEFI Fallback"
		menuentry "Reboot" { reboot }
		menuentry "Poweroff" { halt }
		menuentry "UEFI BIOS Setup" { fwsetup }
	fi
}

for d in $config_directory $cmdpath $prefix; do
	if [ -f $d/custom.cfg ]; then
		source $d/custom.cfg
	fi
done
